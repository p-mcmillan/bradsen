-- 1. Enable pgcrypto (for UUID generation)
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- 2. Create the listings table
CREATE TABLE listings (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  listing_id TEXT UNIQUE,
  listing_key TEXT,
  list_office_key TEXT,
  list_agent_key TEXT,
  colist_office_key TEXT,
  colist_agent_key TEXT,
  list_price NUMERIC,
  availability_date TIMESTAMP,
  lease_amount NUMERIC,
  lease_amount_frequency TEXT,
  lease_per_unit TEXT,
  price_per_unit NUMERIC,
  water_body_name TEXT,
  number_of_buildings INT,
  number_of_units_total INT,
  lot_size_area NUMERIC,
  lot_size_dimensions TEXT,
  lot_size_units TEXT,
  frontage_length_numeric NUMERIC,
  frontage_length_numeric_units TEXT,
  total_actual_rent NUMERIC,
  association_fee NUMERIC,
  association_fee_frequency TEXT,
  association_name TEXT,
  original_entry_timestamp TIMESTAMP,
  modification_timestamp TIMESTAMP,
  status TEXT,
  status_change_timestamp TIMESTAMP,
  description TEXT,
  listing_url TEXT,
  originating_system_name TEXT,
  photos_count INT,
  photos_change_timestamp TIMESTAMP,
  common_interest TEXT,
  list_aor TEXT,
  list_aor_key TEXT,
  unparsed_address TEXT,
  postal_code TEXT,
  subdivision_name TEXT,
  province TEXT,
  street_dir_prefix TEXT,
  street_dir_suffix TEXT,
  street_name TEXT,
  street_number TEXT,
  street_suffix TEXT,
  unit_number TEXT,
  country TEXT,
  city TEXT,
  directions TEXT,
  latitude NUMERIC,
  longitude NUMERIC,
  city_region TEXT,
  map_coordinate_verified BOOLEAN,
  parking_total INT,
  year_built INT,
  bathrooms_partial INT,
  bathrooms_total_integer INT,
  bedrooms_total INT,
  bedrooms_above_grade INT,
  bedrooms_below_grade INT,
  living_area NUMERIC,
  living_area_units TEXT,
  building_area_total NUMERIC,
  building_area_units TEXT,
  parcel_number TEXT,
  zoning TEXT,
  zoning_description TEXT,
  tax_annual_amount NUMERIC,
  tax_year INT,
  internet_entire_listing_display_yn BOOLEAN,
  internet_address_display_yn BOOLEAN,

  -- Arrays and multi-valued fields
  property_sub_type TEXT,
  documents_available TEXT[],
  business_type TEXT[],
  view TEXT[],
  lot_features TEXT[],
  pool_features TEXT[],
  road_surface_type TEXT[],
  current_use TEXT[],
  possible_use TEXT[],
  waterfront_features TEXT[],
  community_features TEXT[],
  fencing TEXT[],
  appliances TEXT[],
  other_equipment TEXT[],
  security_features TEXT[],
  association_fee_includes TEXT[],
  building_features TEXT[],
  architectural_style TEXT[],
  heating TEXT[],
  basement TEXT[],
  exterior_features TEXT[],
  flooring TEXT[],
  parking_features TEXT[],
  cooling TEXT[],
  property_condition TEXT[],
  roof TEXT[],
  construction_materials TEXT[],
  stories INT,
  foundation_details TEXT[],
  sewer TEXT[],
  water_source TEXT[],
  utilities TEXT[],
  irrigation_source TEXT[],
  electric TEXT[],
  accessibility_features TEXT[],
  structure_type TEXT[],
  fireplace_features TEXT[],
  fireplaces_total INT,
  fireplace_yn BOOLEAN,

  -- raw for safety
  raw_data JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- 3. Create the trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 4. Create the trigger to call the function
CREATE TRIGGER update_listings_updated_at
BEFORE UPDATE ON listings
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();